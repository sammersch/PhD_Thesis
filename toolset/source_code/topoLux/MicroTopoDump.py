from MicroTopoLoad import microToponyms, streetNames, wholeJson
from MicroTopoLoadAllData import microTopoAll
import datetime


d = datetime.datetime.now()


def placeNameDump():
    with open('MicroTopoDump/PlaceNameDump.txt', 'w', encoding='utf-8') as dump:
        dump.write('--- START TOPOLUX DUMP ---\nThis file was generated from the topoLux toolset.\n\n\n')
        dump.write('LIST OF NAMES REGISTERED WITH THE LAND REGISTRY OFFICE:\n\ngenerated from: act_pcn_toponymes.'
                   'geojson\nSource: data.public.lu\nAuthor: Administration du cadastre et de la topographie\n\nfile '
                   'generated by: Sam Mersch\n\n\n\n')
        dump.write('There are ' + str(len(microToponyms)) + ' minor place names with their respective coordinte set in '
                                                            'this dump.\n\n')
        for item in microToponyms:
            dump.write('placename:\t{}\ncoordinates:\t{}\n\n'.format(item['name'], item['coordinates']))
        dump.write('--- END TOPOLUX DUMP ---\n\n\n')
        dump.close()


def streetNameDump():
    with open('MicroTopoDump/StreetNameDump.txt', 'w', encoding='utf-8') as dump:
        dump.write('--- START TOPOLUX DUMP ---\nThis file was generated from the topoLux toolset.\n\n\n')
        dump.write('LIST OF NAMES REGISTERED WITH THE LAND REGISTRY OFFICE:\n\ngenerated from: act_pcn_toponymes.'
                   'geojson\nSource: data.public.lu\nAuthor: Administration du cadastre et de la topographie\n\nfile '
                   'generated by: Sam Mersch\n\n\n\n')
        dump.write('There are ' + str(len(streetNames)) + ' street names with their respective coordinte set in '
                                                            'this dump.\n\n')
        for item in streetNames:
            dump.write('placename:\t{}\ncoordinates:\t{}\n\n'.format(item['name'], item['coordinates']))
        dump.write('--- END TOPOLUX DUMP ---\n\n\n')
        dump.close()


def searchAndDump(lookupName):
    with open('MicroTopoDump/' + lookupName + '.txt', 'w', encoding='utf-8') as dump:
        dump.write('--- START TOPOLUX DUMP ---\nThis file was generated from the topoLux toolset.\n\n\n')
        dump.write('LIST OF NAMES REGISTERED WITH THE LAND REGISTRY OFFICE:\n\ngenerated from: act_pcn_toponymes.'
                   'geojson\nSource: data.public.lu\nAuthor: Administration du cadastre et de la topographie\n\nfile '
                   'generated by: Sam Mersch\n\n\n')
        dump.write('list generated searching for place names using: ' + lookupName + '\n\n\n')
        for item in microToponyms:
            if lookupName.lower() in item['name'].lower():
                dump.write('placename:\t{}\ncoordinates:\t{}\n\n'.format(item['name'], item['coordinates']))
        dump.write('--- END TOPOLUX DUMP ---\n\n\n')
        dump.close()


def endsInAndDump(lookupName):
    with open('MicroTopoDump/Suffix_' + lookupName + '.txt', 'w', encoding='utf-8') as dump:
        dump.write('--- START TOPOLUX DUMP ---\nThis file was generated from the topoLux toolset.\n\n\n')
        dump.write('LIST OF NAMES REGISTERED WITH THE LAND REGISTRY OFFICE:\n\ngenerated from: act_pcn_toponymes.'
                   'geojson\nSource: data.public.lu\nAuthor: Administration du cadastre et de la topographie\n\nfile '
                   'generated by: Sam Mersch\n\n\n')
        dump.write('list generated searching for place names ending in: -' + lookupName + '\n\n\n')
        for item in microToponyms:
            if item['name'].lower().endswith(lookupName.lower()):
                dump.write('placename:\t{}\ncoordinates:\t{}\n\n'.format(item['name'], item['coordinates']))
        dump.write('--- END TOPOLUX DUMP ---\n\n\n')
        dump.close()


def dictDump(name, _dict):

    with open('MicroTopoDump/' + name + '.txt', 'w', encoding='utf-8') as dump:
        dump.write('\t\t--- START TOPOLUX DUMP ---\n\nThis file was generated from the topoLux toolset.\n' + ('-'*50))
        dump.write('\n\n\nLIST OF NAMES REGISTERED WITH THE LAND REGISTRY OFFICE:\n\ngenerated from: act_pcn_toponymes.'
                   'geojson\nSource: data.public.lu\nAuthor: Administration du cadastre et de la topographie\n\nfile '
                   'generated by: Sam Mersch\n\n')
        if _dict == microToponyms:
            dump.write('generated from dictionary: microToponyms\n\n\n\n')
            dump.write('There are ' + str(len(microToponyms)) + ' minor place names with their respective coordinte '
                                                                'set in this dump.\n\n')
        if _dict == streetNames:
            dump.write('generated from dictionary: streetNames\n\n\n\n')
            dump.write('There are ' + str(len(streetNames)) + ' street names with their respective coordinte set in '
                                                                'this dump.\n\n')
        if _dict == wholeJson:
            dump.write('generated from dictionary: wholeJson\n\n\n\n')
            dump.write('There are ' + str(len(wholeJson)) + ' names with their respective coordinte set in '
                                                                'this dump.\n\n')

        for item in microToponyms:
            dump.write('placename:\t{}\ncoordinates:\t{}\n\n'.format(item['name'], item['coordinate_set']))
        dump.write('\t\t--- END TOPOLUX DUMP ---\n\n\n')
        dump.close()

def dumpBySection(section):

    with open('MicroTopoDump/' + section + '.txt', 'w', encoding='utf-8') as dump:
        nameCount = []
        dump.write('--- START TOPOLUX DUMP ---\nThis file was generated from the topoLux toolset.\n\n\n')
        dump.write('LIST OF NAMES REGISTERED WITH THE LAND REGISTRY OFFICE:\n\ngenerated from: act_pcn_toponymes.'
                   'geojson\nSource: data.public.lu\nAuthor: Administration du cadastre et de la topographie\n\nfile '
                   'generated by: Sam Mersch\n\n\n')
        dump.write('date generated: ' + str(d) + '\n\n\n')
        dump.write('list generated searching for place names inside section: ' + section + '\n\n\n')
        for item in microTopoAll:
            if item['section'] == section:
                nameCount.append(item['name'])
                dump.write('placename:\t{}\ncoordinates:\t{}\n\n'.format(item['name'], item['coordinates']))
        dump.write('There are {} minor place names in {}.\n\n\n'.format(str(len(nameCount)), str(section)))
        dump.write('--- END TOPOLUX DUMP ---\n\n\n')
        dump.close()



# searchAndDump('WÃ©ngert')
# dumpBySection('Bettborn')
dumpBySection('Larochette')